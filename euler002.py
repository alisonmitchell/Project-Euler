import doctest
import timeit

"""
Problem 2: https://projecteuler.net/problem=2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
find the sum of the even-valued terms.
"""

# sum of Fibonacci even numbers
def sum_even_numbers(sequence):
    """
    Find the sum of the even-valued terms in a sequence 

    :param sequence: Collection of integers

    :returns: Integer
    
    >>> sum_even_numbers([1,3,4,5,7,9])
    4
    >>> sum_even_numbers([2,1,1,1,0,8])
    10
    """
    return sum(num for num in sequence if num % 2 == 0)


# generator function
def fib_gen(max_value: int = 4e6) -> int:
    """
    Generator function to compute the Fibonacci sequence up to the value: max_value

    :param max_value: Integer greater than or equal to 1 

    :returns: Integer

    >>> list(fib_gen(1))
    [1]
    >>> list(fib_gen(2))
    [1, 2]
    >>> list(fib_gen(15))
    [1, 2, 3, 5, 8, 13]
    """
    assert max_value >= 1, "The argument must be greater than or equal to 1"

    yield 1

    a, b = 1, 2           # set first two numbers of sequence
    while b <= max_value: # only continue while b is less than or equal to max_value
        yield b           # generator
        a, b = b, a + b   # Fibonacci terms


# function returns a list
def fib_list(max_value: int) -> list:      
    """
    Generate Fibonacci sequence using list

    :param max_value: Integer greater than or equal to 1 

    :returns: Fibonacci sequence less than or equal to max_value

    >>> list(fib_list(1))
    [1]
    >>> list(fib_list(2))
    [1, 2]
    >>> list(fib_list(15))
    [1, 2, 3, 5, 8, 13]
    """
    assert max_value >= 1, "The argument must be greater or equal to 1"

    result = [1]
    a, b = 1, 2
    while b <= max_value:
        result.append(b)
        a, b = b, a + b
    return result   


# recursion
def fib_recursion(max_value: int = 4e6) -> int:
    """
    Test calculation of Fibonacci with a recursive function

    :param max_value: Integer

    :returns: even-valued terms in Fibonacci sequence

    >>> fib_list(1)
    [1]
    >>> fib_list(2)
    [1, 2]
    >>> fib_list(15)
    [1, 2, 3, 5, 8, 13]
    """
    def fib_recursive(n: int = 4e6) -> int:
        """
        Return Fibonacci term using recursion

        :param n: Index to Fibonacci term

        :returns: A term in the Fibonacci sequence

        >>> fib_recursive(1)
        1
        >>> fib_recursive(2)
        2
        >>> fib_recursive(3)
        3
        >>> fib_recursive(4)
        5
        """
        assert n >= 1, "The argument must be greater than or equal to 1"

        if n <=2:
            return n
        else:
            return fib_recursive(n-1) + fib_recursive(n-2)

    n = 1
    sequence = [] 
    fib_num = 0
    while fib_num <= max_value:
        fib_num = fib_recursive(n)
        n = n + 1
        sequence.append(fib_num)
    return sequence[:-1]
          

# dynamic programming
def fib_dynamic(max_value: int = 4e6) -> list:
    """
    Find the sum of the even-valued terms in the Fibonacci sequence 
    whose values do not exceed four million

    :param max_value: Integer greater than or equal to 1

    :returns: Fibonacci sequence up to max_value 

    >>> fib_dynamic(1)
    [1]
    >>> fib_dynamic(2)
    [1, 2]
    >>> fib_dynamic(15)
    [1, 2, 3, 5, 8, 13]
    """
    assert max_value >= 1, "The argument must be greater than or equal to 1"

    list_results = [1, 2]
    if max_value == 1:
        return [1]
    if max_value == 2:
        return [1, 2]

    i = 2
    while list_results[-1] <= max_value:
        list_results.append(list_results[i-1] + list_results[i-2])
        i = i + 1
    return list_results[:-1]


# iteration
def fib_iter(max_value: int = 4e6) -> int:
    """
    Find the sum of the even-valued terms in the Fibonacci sequence 
    whose values do not exceed four million

    :param max_value: Integer greater than or equal to 1

    :returns: Integer 

    >>> sum_even_numbers(fib_gen(5)) == fib_iter(5)
    True
    >>> sum_even_numbers(fib_gen(10)) == fib_iter(10)
    True
    >>> sum_even_numbers(fib_gen(50)) == fib_iter(50)
    True
    >>> sum_even_numbers(fib_gen(200)) == fib_iter(200)
    True
    >>> sum_even_numbers(fib_gen(1000)) == fib_iter(1000)
    True
    >>> sum_even_numbers(fib_gen(5000)) == fib_iter(5000)
    True
    """
    assert max_value >= 1, "The argument must be greater than or equal to 1"

    fib_1 = 1
    fib_2 = 2
    total = 0

    if max_value == 1:
        return 0
    elif max_value == 2:
        return 2
    
    for _ in range(int(max_value)):
        while fib_2 <= max_value: 
            if fib_2 % 2 == 0:
                total = total + fib_2
            fib_1, fib_2 = fib_2, fib_1 + fib_2
    return total


def main() -> True:
    """ 
    Solve problems with different algorithms and measure computation time for each
    
    :return: True
    """
    
    n_retry = 5
    print('-- fib_gen: ', sum_even_numbers(fib_gen(4e6)))
    print('-- fib_list: ', sum_even_numbers(fib_list(4e6)))
    print('-- fib_recursion: ', sum_even_numbers(fib_recursion(4e6)))
    print('-- fib_dynamic: ', sum_even_numbers(fib_dynamic(4e6)))
    print('-- fib_iter: ', fib_iter(4e6))
    
    for function_name in ['fib_gen', 'fib_list',  
                     'fib_recursion', 'fib_dynamic', 'fib_iter']:
        meas_time = timeit.timeit(function_name + '(4e6)',
                                  setup='from __main__ import ' + function_name,
                                  number=n_retry)
        average_time = 1000 * meas_time / n_retry
        print(f"Average time of {function_name}: {round(average_time, 5)}ms")
    return True
         


#-------------------------------------------------------------


if __name__ == "__main__":
    print("\n*** DOCTEST ***")
    failure_count, test_count = doctest.testmod(verbose=False)
    assert failure_count == 0, 'Test failure... bailing out'
    print(f'All {test_count} tests passed')
    main() 